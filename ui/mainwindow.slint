// By: Eric MacDonald (eMac)

import "./fonts/MLhelvetica.ttf";
import "./fonts/MLmonaco.ttf";
import { 
	Palette,
	TabWidget,
	VerticalBox,
	Spinner,
	TextEdit,
	Button
} from "std-widgets.slint";
import {
	StartPage, UIMAMEOptions,
	SetupPage, UIPaths,
	AboutPage, UIAbout
} from "./pages.slint";
import { 
	LoadingBox
} from "./widgets/loadingbox.slint";

export { 
	UIMAMEOptions,
	UIPaths,
	UIAbout
}

export enum MAMEConsoleScrollMode {
	NoScrollCheck,
	ConditionalScroll,
	ForceScroll
}

export component MainWindow inherits Window {
	title: @tr("WebTV MAME Launcher");
	// might be a good idea to save window sizes in the config file.
	preferred-width: 800px;
	preferred-height: 610px;
	min-width: self.preferred-width;
	min-height: self.preferred-height;
	icon: @image-url("images/icon.png");
	default-font-family: (mame-console-enabled) ? "Monaco, MLMonaco" : "Helvetica, MLHelvetica";
	default-font-size: 13px;
	default-font-weight: 400;
	padding: 0px;

	in-out property<int> mame-pid: 0;
	in-out property<bool> mame-broken: false;
	in-out property<int> loading-depth: 0;
	in-out property<string> loading-message: "";
	in-out property<string> launcher-state-message: "";
	in-out property<bool> mame-console-enabled: false;
	in-out property<string> mame-console-text: "";
	in-out property<bool> using-mame-debug: false;

	in-out property<MAMEConsoleScrollMode> scroll-mode: MAMEConsoleScrollMode.ConditionalScroll;
	in-out property<bool> can-scroll: false;
	in-out property<length> autoscroll-allowed-drift: 138px;
	changed mame-console-text => {
		if(root.scroll-mode == MAMEConsoleScrollMode.ForceScroll || (root.scroll-mode == MAMEConsoleScrollMode.ConditionalScroll && root.can-scroll)) {
			mame-console.set-selection-offsets(4294967295, 4294967295); // Scroll to end hack
		}

		// Make sure scroll state is updated. This usually gets updated by mousing around the application but sometimes we're not in focus.
		root.can-scroll = (mame-console.viewport-y + mame-console.viewport-height) <= (mame-console.visible-height + root.autoscroll-allowed-drift);
	}

	callback send-key-to-mame(string, bool);
	callback close-mame();
	callback do-fart();

	status-message := VerticalLayout {
		x: 0px;
		y: 0px;
		width: 100%;
		height: 42px;
		padding: 4px;

		Rectangle {
			width: parent.width - (parent.padding * 2);
			height: parent.height - (parent.padding * 2);
			visible: (root.launcher-state-message != "") ? true : false;
			border-color: (root.mame-broken) ? #990000 : #999900;
			border-width: 2px;

			Text {
				text: root.launcher-state-message;
				vertical-alignment: center;
				horizontal-alignment: center;
			}
		}
	}

	tab-widget := TabWidget {
		x: 0px;
		y: (root.launcher-state-message != "") ? status-message.height + 3px : 3px;
		width: 100%;
		height: ((root.launcher-state-message != "") ? (root.height - status-message.height) : root.height);
		padding: 10px;
		current-index: (root.mame-broken) ? 1 : 0;

		Tab {
			title: @tr("Start MAME");
			StartPage {
				opacity: (root.mame-broken) ? 0.2 : 1.0;
			}
		}
		Tab {
			title: @tr("Set me up");
			SetupPage {}
		}
		Tab {
			title: @tr("About");
			AboutPage {}
		}
	}
	// This rectangle is line across the bottom of the tabs.
	Rectangle {
		x: 0px;
		y: tab-widget.y + 31px;
		width: 100%;
		height: 2px;
		background: Palette.alternate-background;
	}

	LoadingBox { 
		message: root.loading_message;
		visible: (root.loading-depth > 0);
	}

	// MAME Console window.
	// TouchArea is used to capture click events so they don't bubble to the bottom layers. The console is an overlay over the main window.
	TouchArea {
		x: 0px;
		y: 0px;
		width: root.width;
		height: root.height;
		enabled: root.mame-console-enabled;
		padding: 0px;
		pointer-event => {
			// Routinely check if we're scrolled to the bottom. Using mouse movements so this value is fresh.
			// The autoscroll event happens after text is added. If a large chunk of text is added, it scrolls beyond the drift and breaks autoscroll.
			// This allows us to have an updated state before text is added.
			root.can-scroll = (mame-console.viewport-y + mame-console.viewport-height) <= (mame-console.visible-height + root.autoscroll-allowed-drift);
		}
		// FocusScope is used to send keys back to MAME so we can handle crash events on bf0. Smart card serial out goes to console, hw keyboard (implemented in MAME) for input.
		FocusScope {
			x: 0px;
			y: 0px;
			width: parent.width;
			height: parent.height;
			enabled: root.mame-console-enabled;
			padding: 0px;
			key-pressed(event) => {
				root.send-key-to-mame(event.text, event.modifiers.shift);

				accept
			}
			Rectangle {
				x: 0px;
				y: 0px;
				width: parent.width;
				height: parent.height;
				visible: root.mame-console-enabled;
				padding: 0px;
				background: Palette.alternate-background;
				// Might do syntax highlighting if Slint ever has support (probably wont implement it myself)
				// Seems like they're looking at cosmic-text
				// https://github.com/slint-ui/slint/issues/2723
				mame-console := TextEdit {
					x: 0px;
					y: 0px;
					width: parent.width;
					height: parent.height;
					text: root.mame-console-text;
					enabled: true;
					padding: 0px;
					read-only: true;
					wrap: word-wrap;
				}
				console-scroll-to-end := Rectangle {
					x: console-close.x - self.width - 12px;
					y: 8px;
					width: 24px;
					height: 24px;
					background: Palette.alternate-background;
					border-width: 1px;
					border-radius: 5px;
					border-color: Palette.alternate-background;
					Image {
						x: 0px;
						y: 0px;
						height: parent.height;
						width: parent.width;
						source: @image-url("images/console-scroll-to-bottom.svg");
						colorize: (console-scroll-to-end-ta.has-hover) ? #fff : #aaa;
						console-scroll-to-end-ta := TouchArea {
							x: 0px;
							y: 0px;
							height: parent.height;
							width: parent.width;
							clicked => {
								mame-console.set-selection-offsets(4294967295, 4294967295); // Scroll to end hack
							}
						}
					}
				}
				console-close := Rectangle {
					x: root.width - self.width - 35px;
					y: 8px;
					width: 24px;
					height: 24px;
					background: Palette.alternate-background;
					border-width: 1px;
					border-radius: 5px;
					border-color: Palette.alternate-background;
					Image {
						x: 0px;
						y: 0px;
						height: parent.height;
						width: parent.width;
						source: @image-url("images/console-close.svg");
						colorize: (console-close-ta.has-hover) ? #fff : #aaa;
						console-close-ta := TouchArea {
							x: 0px;
							y: 0px;
							height: parent.height;
							width: parent.width;
							clicked => {
								root.close-mame();
							}
						}
					}
				}
			}
		}
	}

	// Disable overlay. Used to disable the start tab when MAME is flagged as broken.
	TouchArea {
		x: 0px;
		y: tab-widget.y + 31px + 2px;
		width: 100%;
		height: root.height - self.y;
		enabled: root.mame-broken && tab-widget.current-index == 0;
	}

	tooltip := Rectangle {
		property <bool> opened: false;
		states [
			opened when self.opened: {
				opacity: 1.0;
				in {
					animate opacity {
						duration: 400ms;
						delay: 0ms;
					}
				}
			}
			closed when !self.opened: {
				opacity: 0.0;
				in {
					animate opacity {
						duration: 400ms;
						delay: 900ms;
					}
				}
			}
		]
		x: root.width - self.width - 8px;
		y: root.height - self.height - 8px;
		z: 1;
		opacity: 0.0;
		width: tooltip-layout.preferred-width;
		height: tooltip-layout.preferred-height;
		visible: true;
		background: #000;
		border-width: 1px;
		border-radius: 4px;
		border-color: #444;

		// Tooltip fully shown, now prepare to hide it.
		if tooltip.opacity > 0.7: Rectangle {
			init => {
				tooltip.opened = false;
			}
		}

		tooltip-layout := HorizontalLayout { 
			z: 1;
			padding: 6px;
			tooltip-text := Text { 
				z: 1;
				text: "";
			}
		}
	}
}
